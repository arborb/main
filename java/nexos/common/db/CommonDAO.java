package nexos.common.db;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.SqlMapClientTemplate;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionException;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;

/**
 * Class: CommonDAO<br>
 * Description: WMS Common DAO (Data Access Object)<br>
 * Copyright: Copyright (c) 2013 ASETEC Corporation. All rights reserved.<br>
 * Company : ASETEC<br>
 * 
 * @author ASETEC
 * @version 1.0
 * 
 * <pre style="font-family: NanumGothicCoding, GulimChe">
 * ---------------------------------------------------------------------------------------------------------------------
 *  Version    Date          Author           Description
 * ---------  ------------  ---------------  ---------------------------------------------------------------------------
 *  1.0        2013-01-01    ASETEC           신규작성
 * ---------------------------------------------------------------------------------------------------------------------
 * </pre>
 */
public class CommonDAO implements TransactionManager {

  // private final Logger logger = LoggerFactory.getLogger(CommonDAO.class);

  private SqlMapClientTemplate       sqlMapClientTemplate;

  private PlatformTransactionManager txManager;

  /**
   * SqlMapClientTemplalate 리턴
   * 
   * @return
   */
  public SqlMapClientTemplate getSqlMapClientTemplate() {

    return this.sqlMapClientTemplate;
  }

  /**
   * SqlMapClientTemplate 세팅
   * 
   * @param sqlMapClientTemplate
   */
  public void setSqlMapClientTemplate(SqlMapClientTemplate sqlMapClientTemplate) {

    this.sqlMapClientTemplate = sqlMapClientTemplate;
  }

  /**
   * PlatformTransactionManager 리턴
   * 
   * @return
   */
  public PlatformTransactionManager getPlatformTransactionManager() {

    return this.txManager;
  }

  /**
   * PlatformTransactionManager 세팅
   * 
   * @param txManager
   */
  public void setPlatformTransactionManager(PlatformTransactionManager txManager) {

    this.txManager = txManager;
  }

  /**
   * 쿼리ID로 데이터 조회 후 List 형태로 리턴
   * 
   * @param queryId 쿼리ID
   * @return
   * @throws Exception
   */
  @SuppressWarnings("rawtypes")
  public List getDataSet(String queryId) throws DataAccessException {

    return getDataSet(queryId, null);
  }

  /**
   * 쿼리ID로 데이터 조회 후 List 형태로 리턴
   * 
   * @param queryId 쿼리ID
   * @param params 조회조건
   * @return
   * @throws Exception
   */
  @SuppressWarnings("rawtypes")
  public List getDataSet(String queryId, Map<String, Object> params) throws DataAccessException {

    return this.sqlMapClientTemplate.queryForList(queryId, params);
  }

  /**
   * 쿼리ID로 데이터 조회 후 Json 문자열로 리턴
   * 
   * @param queryId 쿼리ID
   * @param params 조회조건
   * @return
   * @throws Exception
   */
  public JsonDataSet getJsonDataSet(String queryId, Map<String, Object> params) throws DataAccessException {

    JsonRowHandler rowHandler = new JsonRowHandler();
    this.sqlMapClientTemplate.queryWithRowHandler(queryId, params, rowHandler);
    return rowHandler.getJsonDataSet();
  }

  /**
   * 쿼리ID로 데이터 조회 후 Json 문자열로 리턴
   * 
   * @param queryId 쿼리ID
   * @return
   * @throws Exception
   */
  public JsonDataSet getJsonDataSet(String queryId) throws DataAccessException {

    return getJsonDataSet(queryId, null);
  }

  /**
   * 입력 처리하기
   * 
   * @param queryId 입력처리할 쿼리ID
   * @param map 입력처리할 데이터
   * @return The primary key of the newly inserted row. This might be automatically
   * generated by the RDBMS, or selected from a sequence table or other source.
   * @throws Exception
   */
  public Object insert(String queryId, Map<String, Object> map) throws DataAccessException {

    return this.sqlMapClientTemplate.insert(queryId, map);
  }

  /**
   * 수정 처리하기
   * 
   * @param queryId 업데이트할 쿼리ID
   * @param map 업데이트할 데이터
   * @return 처리 갯수
   * @throws Exception
   */
  public int update(String queryId, Map<String, Object> map) throws DataAccessException {

    return this.sqlMapClientTemplate.update(queryId, map);
  }

  /**
   * 삭제처리 하기
   * 
   * @param queryId
   * @param map
   * @return
   * @throws Exception
   */
  public int delete(String queryId, Map<String, Object> map) throws DataAccessException {

    return this.sqlMapClientTemplate.delete(queryId, map);
  }

  /**
   * SP 호출
   * 
   * @param queryId 쿼리ID
   * @param params 조회조건
   * @return
   * @throws Exception
   */
  public HashMap<String, Object> callSP(String queryId, Map<String, Object> params) throws DataAccessException {

    HashMap<String, Object> resultMap = new HashMap<String, Object>(params);
    this.sqlMapClientTemplate.update(queryId, resultMap);
    return resultMap;
  }

  /**
   * 데이터 조회 후 Excel 형태로 데이터 기록
   * 
   * @param queryId 조회할 쿼리ID
   * @param xlsWorkbook Excel Workbook
   * @param grdColumns Grid Column 정보
   * @param xlsExportType Excel Export 타입
   * @param xlsTitle Excel Sheet 타이틀
   * @return 데이터 건수
   */
  public int datasetToExcel(String queryId, HSSFWorkbook xlsWorkbook, List<Map<String, Object>> grdColumns,
    String xlsExportType, String xlsTitle) throws DataAccessException {

    return datasetToExcel(queryId, null, xlsWorkbook, grdColumns, xlsExportType, xlsTitle);
  }

  /**
   * 데이터 조회 후 Excel 형태로 데이터 기록
   * 
   * @param queryId 조회할 쿼리ID
   * @param params 조회 조건
   * @param xlsWorkbook Excel Workbook
   * @param grdColumns Grid Column 정보
   * @param xlsExportType Excel Export 타입
   * @param xlsTitle Excel Sheet 타이틀
   * @return 데이터 건수
   */
  public int datasetToExcel(String queryId, Map<String, Object> params, HSSFWorkbook xlsWorkbook,
    List<Map<String, Object>> grdColumns, String xlsExportType, String xlsTitle) throws DataAccessException

  {

    ExcelRowHandler rowHandler = new ExcelRowHandler(xlsWorkbook, grdColumns, xlsExportType, xlsTitle);
    sqlMapClientTemplate.queryWithRowHandler(queryId, params, rowHandler);
    return rowHandler.getCount();
  }

  /**
   * Transaction 시작
   * 
   * @return
   */
  @Override
  public TransactionStatus beginTrans() throws TransactionException {

    DefaultTransactionDefinition dtd = new DefaultTransactionDefinition();
    dtd.setName("neXosTransaction");
    dtd.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

    return beginTrans(dtd);
  }

  /**
   * Transaction 시작
   * 
   * @param definition
   * @return
   */
  @Override
  public TransactionStatus beginTrans(TransactionDefinition definition) throws TransactionException {

    return this.txManager.getTransaction(definition);
  }

  /**
   * Transaction commit
   * 
   * @param ts
   */
  @Override
  public void commitTrans(TransactionStatus ts) throws TransactionException {

    this.txManager.commit(ts);
  }

  /**
   * Transaction rollback
   * 
   * @param ts
   */
  @Override
  public void rollbackTrans(TransactionStatus ts) throws TransactionException {

    this.txManager.rollback(ts);
  }
}
